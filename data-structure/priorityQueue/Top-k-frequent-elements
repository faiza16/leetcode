//https://leetcode.com/problems/top-k-frequent-elements
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n: nums){
            map.put(n, map.getOrDefault(n,0)+1);
        }
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>((e1, e2) -> e2.getValue() - e1.getValue());
        for(Map.Entry<Integer, Integer> e : map.entrySet()){
            pq.add(e); 
        }
        int[] ans = new int[k];
        for(int i = 0; i < k; i++){
            ans[i] = pq.poll().getKey(); // when poll is called largest entry set from queue will be removed first. This is because of comparator e2.getValue() - e1.getValue()
        }
        return ans;
    }
}
